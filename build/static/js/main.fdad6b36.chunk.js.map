{"version":3,"sources":["pages/index.tsx","components/Navbar/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["IndexPage","NavbarComponents","React","useState","activeItem","setActiveItem","handleMenuClick","menu","Segment","inverted","style","borderRadius","Menu","secondary","Item","name","active","onClick","App","className","Navbar","Container","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","rel","href","document","getElementById"],"mappings":"oQAMeA,EAJG,WAChB,OAAO,8C,0BC4BMC,EA5BU,WACvB,MAAoCC,IAAMC,SAAS,QAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAkB,SAACC,GAAD,OAAkBF,EAAcE,IAExD,OACE,cAACC,EAAA,EAAD,CAASC,UAAQ,EAACC,MAAO,CAAEC,aAAc,GAAzC,SACE,eAACC,EAAA,EAAD,CAAMH,UAAQ,EAACI,WAAS,EAAxB,UACE,cAACD,EAAA,EAAKE,KAAN,CACEC,KAAK,OACLC,OAAuB,SAAfZ,EACRa,QAAS,kBAAMX,EAAgB,WAEjC,cAACM,EAAA,EAAKE,KAAN,CACEC,KAAK,WACLC,OAAuB,aAAfZ,EACRa,QAAS,kBAAMX,EAAgB,eAEjC,cAACM,EAAA,EAAKE,KAAN,CACEC,KAAK,UACLC,OAAuB,YAAfZ,EACRa,QAAS,kBAAMX,EAAgB,oBCD1BY,MAjBf,WACE,OACE,qBAAKC,UAAW,WAAhB,SACE,eAAC,IAAD,WACE,cAACC,EAAD,IACA,cAACC,EAAA,EAAD,CAAWZ,UAAQ,EAAnB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOa,KAAK,IAAZ,SACE,cAAC,EAAD,gBCFCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,sBAAMC,IAAI,OAAOC,KAAK,mCACtB,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.fdad6b36.chunk.js","sourcesContent":["import React from \"react\"\n\nconst IndexPage = () => {\n  return <h1>hello world</h1>\n}\n\nexport default IndexPage\n","import React from \"react\"\nimport { Menu, Segment } from \"semantic-ui-react\"\n\nconst NavbarComponents = () => {\n  const [activeItem, setActiveItem] = React.useState(\"home\")\n\n  const handleMenuClick = (menu: string) => setActiveItem(menu)\n\n  return (\n    <Segment inverted style={{ borderRadius: 0 }}>\n      <Menu inverted secondary>\n        <Menu.Item\n          name=\"home\"\n          active={activeItem === \"home\"}\n          onClick={() => handleMenuClick(\"home\")}\n        />\n        <Menu.Item\n          name=\"messages\"\n          active={activeItem === \"messages\"}\n          onClick={() => handleMenuClick(\"messages\")}\n        />\n        <Menu.Item\n          name=\"friends\"\n          active={activeItem === \"friends\"}\n          onClick={() => handleMenuClick(\"friends\")}\n        />\n      </Menu>\n    </Segment>\n  )\n}\n\nexport default NavbarComponents\n","import \"./App.css\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport { Container } from \"semantic-ui-react\"\nimport IndexPage from \"./pages\"\nimport NavbarComponents from \"./components/Navbar\"\n\nfunction App() {\n  return (\n    <div className={\"App-body\"}>\n      <Router>\n        <NavbarComponents />\n        <Container inverted>\n          <Switch>\n            <Route path=\"/\">\n              <IndexPage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport \"semantic-ui-css/semantic.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/logo-noioru-2.svg\" />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}